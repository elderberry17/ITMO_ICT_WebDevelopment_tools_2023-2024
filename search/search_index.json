{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"auth/","title":"Authentication API Documentation","text":""},{"location":"auth/#introduction","title":"Introduction","text":"<p>This documentation provides details about the API endpoints for authentication and user management.</p>"},{"location":"auth/#models","title":"Models","text":""},{"location":"auth/#token","title":"Token","text":"<ul> <li>access_token: <code>str</code></li> <li>token_type: <code>str</code></li> </ul>"},{"location":"auth/#tokendata","title":"TokenData","text":"<ul> <li>username: <code>str | None</code></li> </ul>"},{"location":"auth/#hackathon","title":"Hackathon","text":"<ul> <li>id: <code>int</code></li> <li>name: <code>str</code></li> <li>start_date: <code>datetime.datetime</code></li> <li>end_date: <code>datetime.datetime</code></li> </ul>"},{"location":"auth/#team","title":"Team","text":"<ul> <li>id: <code>int</code></li> <li>name: <code>str</code></li> <li>hackathon: <code>Hackathon</code></li> <li>role: <code>str</code></li> </ul>"},{"location":"auth/#user","title":"User","text":"<ul> <li>id: <code>int</code></li> <li>username: <code>str</code></li> <li>email: <code>str | None</code></li> <li>full_name: <code>str | None</code></li> <li>contact_number: <code>str | None</code></li> <li>teams: <code>list[Team] | None</code></li> </ul>"},{"location":"auth/#usercreatedata","title":"UserCreateData","text":"<ul> <li>username: <code>str</code></li> <li>password: <code>str</code></li> <li>email: <code>str | None</code></li> <li>full_name: <code>str | None</code></li> <li>contact_number: <code>str | None</code></li> </ul>"},{"location":"auth/#userpassword","title":"UserPassword","text":"<ul> <li>password: <code>str</code></li> </ul>"},{"location":"auth/#endpoints","title":"Endpoints","text":""},{"location":"auth/#login-for-access-token","title":"Login for Access Token","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/token</code></li> <li>Request Body: <code>OAuth2Form</code></li> <li>Response: <code>Token</code></li> <li>Note: Authenticates the user and returns an access token.</li> </ul>"},{"location":"auth/#register-user","title":"Register User","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/users</code></li> <li>Request Body: <code>UserCreateData</code></li> <li>Response: <code>User</code></li> <li>Note: Registers a new user.</li> </ul>"},{"location":"auth/#read-users","title":"Read Users","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/users</code></li> <li>Response: <code>list[User]</code></li> <li>Note: Retrieves all users.</li> </ul>"},{"location":"auth/#read-current-user","title":"Read Current User","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/users/me/</code></li> <li>Response: <code>User</code></li> <li>Note: Retrieves the current user.</li> </ul>"},{"location":"auth/#change-password","title":"Change Password","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/users/change_password/</code></li> <li>Request Body: <code>UserPassword</code></li> <li>Response: <code>User</code></li> <li>Note: Changes the password for the current user.</li> </ul>"},{"location":"auth/#usage","title":"Usage","text":"<ul> <li>Make requests to the provided endpoints using appropriate HTTP methods and request bodies as described.</li> </ul>"},{"location":"auth/#note","title":"Note","text":"<ul> <li>Ensure to provide valid data formats and handle errors appropriately.</li> </ul>"},{"location":"hackathons/","title":"Hackathons API Documentation","text":""},{"location":"hackathons/#introduction","title":"Introduction","text":"<p>This documentation provides details about the API endpoints for managing hackathons.</p>"},{"location":"hackathons/#models","title":"Models","text":""},{"location":"hackathons/#team","title":"Team","text":"<ul> <li>id: <code>int</code></li> <li>name: <code>str</code></li> </ul>"},{"location":"hackathons/#task","title":"Task","text":"<ul> <li>id: <code>int</code></li> <li>title: <code>str</code></li> <li>description: <code>str</code></li> <li>requirements: <code>str</code></li> <li>evaluation_criteria: <code>str</code></li> </ul>"},{"location":"hackathons/#hackathon","title":"Hackathon","text":"<ul> <li>id: <code>int | None</code></li> <li>name: <code>str</code></li> <li>start_date: <code>datetime.datetime</code></li> <li>end_date: <code>datetime.datetime</code></li> <li>tasks: <code>list[Task]</code></li> <li>teams: <code>list[Team]</code></li> </ul>"},{"location":"hackathons/#hackathoncreatedata","title":"HackathonCreateData","text":"<ul> <li>name: <code>str</code></li> <li>start_date: <code>datetime.datetime</code></li> <li>end_date: <code>datetime.datetime</code></li> </ul>"},{"location":"hackathons/#hackathonupdatedata","title":"HackathonUpdateData","text":"<ul> <li>name: <code>str | None</code></li> <li>start_date: <code>datetime.datetime | None</code></li> <li>end_date: <code>datetime.datetime | None</code></li> </ul>"},{"location":"hackathons/#endpoints","title":"Endpoints","text":""},{"location":"hackathons/#get-all-hackathons","title":"Get All Hackathons","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/hackathons/</code></li> <li>Response: <code>list[Hackathon]</code></li> </ul>"},{"location":"hackathons/#get-hackathon-by-id","title":"Get Hackathon by ID","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/hackathons/{hackathon_id}</code></li> <li>Parameter: <code>hackathon_id</code>: <code>int</code></li> <li>Response: <code>Hackathon</code></li> </ul>"},{"location":"hackathons/#create-hackathon","title":"Create Hackathon","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/hackathons/</code></li> <li>Request Body: <code>HackathonCreateData</code></li> <li>Response: <code>Hackathon</code></li> </ul>"},{"location":"hackathons/#update-hackathon","title":"Update Hackathon","text":"<ul> <li>Method: <code>PATCH</code></li> <li>URL: <code>/hackathons/{hackathon_id}</code></li> <li>Parameter: <code>hackathon_id</code>: <code>int</code></li> <li>Request Body: <code>HackathonUpdateData</code></li> <li>Response: <code>Hackathon</code></li> </ul>"},{"location":"hackathons/#delete-hackathon","title":"Delete Hackathon","text":"<ul> <li>Method: <code>DELETE</code></li> <li>URL: <code>/hackathons/{hackathon_id}</code></li> <li>Parameter: <code>hackathon_id</code>: <code>int</code></li> <li>Response: <code>str</code></li> </ul>"},{"location":"hackathons/#usage","title":"Usage","text":"<ul> <li>Make requests to the provided endpoints using appropriate HTTP methods and request bodies as described.</li> </ul>"},{"location":"hackathons/#note","title":"Note","text":"<ul> <li>Ensure to provide valid data formats and handle errors appropriately.</li> </ul>"},{"location":"lab2_description/","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043b\u0430\u0431\u044b","text":"<p>\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u0435 \u043c\u044b \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u043b\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a threading, multiprocessing \u0438 asyncio.</p>"},{"location":"lab2_description/#_2","title":"\u041f\u0435\u0440\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u0440\u0430\u0441\u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0443\u043c\u043c\u044b \u043e\u0442 0 \u0434\u043e 10 \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432.</p>"},{"location":"lab2_description/#_3","title":"\u0412\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435","text":"<p>\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0411\u0414 \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u043b\u0430\u0431\u044b. \u041c\u043e\u044f \u043f\u0435\u0440\u0432\u0430\u044f \u043b\u0430\u0431\u0430 \u043f\u043e\u0441\u0432\u044f\u0449\u0435\u043d\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e \u043e \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044f \u043f\u0430\u0440\u0441\u0438\u043b \u044d\u0442\u043e\u0442 \u0441\u0430\u0439\u0442: https://hacklist.ru/. \u0412\u0441\u0435\u0433\u043e \u0442\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0430 \u0438\u043d\u0444\u0430 \u043e 100 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430\u0445.  \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u044f \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0438\u043b \u0441\u0441\u044b\u043b\u043a\u0438 \u043d\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u043f\u043e\u043b\u043e\u0436\u0438\u043b \u0438\u0445 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 json. \u0414\u0430\u043b\u0435\u0435 \u044f \u0431\u0438\u043b \u044d\u0442\u043e\u0442 json \u043d\u0430 \u0431\u0430\u0442\u0447\u0438 \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u043b \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432.</p> <p>\u042f \u043f\u0430\u0440\u0441\u0438\u043b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 - \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0430 (\u043f\u043e\u0448\u043b\u043e \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 Task)</p> <p>\u042d\u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0432\u044b\u0436\u0430\u0442\u044c \u0441 \u0441\u0430\u0439\u0442\u0430. \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043b \u044f 2 \u0442\u0430\u0431\u043b\u0438\u0446\u044b: Hackaton \u0438 Task, \u0438\u043d\u0441\u0442\u0430\u043d\u0441\u044b \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u043b \u043a \u043f\u0435\u0440\u0432\u043e\u0439.</p> <p>\u042f \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b \u043a\u0430\u0436\u0434\u044b\u0439 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442 5 \u0440\u0430\u0437, \u0441\u0447\u0438\u0442\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 std. \u0422\u0430\u043a\u0436\u0435 \u044f \u0445\u0430\u043f\u0438\u0445\u043d\u0443\u043b \u0411\u0414 \u0432 \u0434\u043e\u043a\u0435\u0440, \u0447\u0442\u043e\u0431\u044b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437 \u043f\u043e\u0434\u043d\u0438\u043c\u0430\u0442\u044c \u0435\u0435 \u0441 \u043d\u0443\u043b\u044f \u0438 \u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043c\u0435\u0440\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0447\u0435\u0441\u0442\u043d\u044b\u043c\u0438.</p>"},{"location":"lab3/","title":"Docker. \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438","text":"<ol> <li>\u041f\u0435\u0440\u0432\u044b\u043c \u0434\u0435\u043b\u043e\u043c \u043d\u0430\u043f\u0438\u0448\u0435\u043c Dockerfile \u0434\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u0441\u043e\u0437\u0434\u0430\u0432 \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0437 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432 Docker-compose:</li> </ol> <pre><code>FROM python:3.11.6-slim-bookworm as base\n\nWORKDIR /app\nCOPY requirements.txt /app/\n\nENV PYTHONUNBUFFERED 1\nENV PYTHONDONTWRITEBYTECODE 1\n\nFROM base as installer\n\nRUN apt update &amp;&amp; apt install --no-install-recommends -y build-essential libpq-dev\nRUN pip install uv\nRUN uv venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\nENV VIRTUAL_ENV=/opt/venv\nRUN uv pip install --no-cache -r requirements.txt\n\nFROM base as runtime\n\nRUN apt update &amp;&amp; \\\n    apt install --no-install-recommends -y libpq-dev &amp;&amp; \\\n    apt clean &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\nCOPY --from=installer /opt/venv /opt/venv\nENV PATH=\"/opt/venv/bin:$PATH\"\n\nCOPY ./src/ .\n</code></pre> <p>\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0431\u043b\u043e\u043a\u0435 \u043c\u044b \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e app/, \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c requirements.txt \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u043f\u0430\u043a\u0435\u0442\u044b, \u0441\u0442\u0430\u0432\u0438\u043c \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 uv, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u043e\u0435 \u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u0435 \u0438 \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0442\u0443\u0434\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438\u0437 requirements.txt \u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u0430\u043a\u0435\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0411\u0414, \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c venv \u0438 \u0444\u0430\u0439\u043b\u044b \u0438\u0437 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c</p> <ol> <li>\u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e docker-compose.yml, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 postgres \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f \u0411\u0414 \u0438 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043d\u0430 \u043e\u0431\u0440\u0430\u0437\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f:</li> </ol> <pre><code>version: \"3.4\"\n\nservices:\n  db:\n    image: postgres:14.1\n    hostname: ${DB_HOST}\n    container_name: db\n    restart: always\n    volumes:\n      - ./db_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_NAME}\n    env_file:\n      - .env\n\n  rest:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: rest\n    command: python -m uvicorn main:app --host 0.0.0.0 --port 8081\n    restart: always\n    volumes:\n      - ./src/:/app\n    ports:\n      - \"8081:8081\"\n    env_file:\n      - .env\n    depends_on:\n      - db\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0442\u0430\u043a \u0436\u0435, \u043a\u0430\u043a \u0438 \u0440\u0430\u043d\u044c\u0448\u0435, \u043d\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Docker</p> <ol> <li>\u0422\u0435\u043f\u0435\u0440\u044c \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u0443\u0435\u043c \u043f\u0430\u0440\u0441\u0435\u0440</li> </ol> <p>\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 docker-compose \u043d\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b: Redis \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447 \u0438 RabbitMQ \u0434\u043b\u044f \u0431\u0440\u043e\u043a\u0438\u043d\u0433\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0441 Celery:</p> <pre><code>  rabbitmq:\n    image: rabbitmq:3.13.1\n    hostname: ${RABBITMQ__HOST}\n    container_name: rabbitmq\n    restart: always\n\n  redis:\n    image: redis:7.2.4\n    hostname: ${REDIS__HOST}\n    container_name: redis\n    restart: always\n</code></pre> <p>\u0412 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0441 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e \u0434\u043b\u044f Celery \u0438 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0442\u0430\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f Celery \u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430:</p> <pre><code>import datetime\n\nimport requests\nfrom bs4 import BeautifulSoup\nfrom celery import Celery\nfrom sqlmodel import Session\n\nfrom config import settings\nfrom db.connection import engine\nfrom db.models import Hackathon, Task\n\napp = Celery(\n    \"celery_app\",\n    result_backend=f\"redis://{settings.redis_host}:{settings.redis_port}/0\",\n    broker=f\"pyamqp://guest@{settings.rabbitmq_host}:{settings.rabbitmq_port}//\",\n)\n\n\n@app.task\ndef parse_hackathon(url):\n    page = requests.get(url)\n    soup = BeautifulSoup(page.text, 'html.parser')\n    hack_name = soup.find(\"h1\").text\n    paragraphs = list(map(lambda x: x.text, soup.find_all('p')))\n    hack_case = '\\n'.join(paragraphs)\n    case_title = paragraphs[0]\n\n    with Session(engine) as session:\n        hackathon = Hackathon(\n            name=hack_name,\n            start_date=datetime.datetime.now(),\n            end_date=datetime.datetime.now() + datetime.timedelta(days=7)\n        )\n\n        session.add(hackathon)\n        session.commit()\n        session.refresh(hackathon)\n\n        task = Task(\n            title=case_title,\n            description=hack_case,\n            requirements=\"Be cool\",\n            evaluation_criteria=\"Accuracy\",\n            hackathon_id=hackathon.id\n        )\n        session.add(task)\n        session.commit()\n        session.refresh(task)\n\n        print(hackathon.name)\n\n        return {\"hackathon\": hackathon.model_dump(), \"task\": task.model_dump()}\n</code></pre> <p>\u0422\u0435\u043f\u0435\u0440\u044c \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0434\u043b\u044f Celery:</p> <pre><code>  celery:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: celery\n    command: python -m celery -A celery_worker.app worker\n    restart: always\n    volumes:\n      - ./src/:/app\n    env_file:\n      - .env\n    depends_on:\n      - rest\n      - redis\n      - rabbitmq\n</code></pre> <ol> <li>\u041d\u0430\u043a\u043e\u043d\u0435\u0446, \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043d\u043e\u0432\u044b\u0435 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435:</li> </ol> <pre><code>from fastapi import APIRouter\nfrom celery import current_app as celery_app\n\nfrom celery_worker.app import parse_hackathon\nfrom rest.celery_tasks.schemas import TaskIdResponse, TaskStatusResponse, ParsedDataResponse\n\nrouter = APIRouter()\n\n\n@router.post(\"/start_parsing\")\nasync def start_parsing(url: str) -&gt; TaskIdResponse:\n    task = parse_hackathon.delay(url)\n    return TaskIdResponse.model_validate({\"task_id\": task.id})\n\n\n@router.get(\"/check_parsing\")\nasync def check_parsing(task_id: str) -&gt; TaskStatusResponse:\n    task = celery_app.AsyncResult(task_id)\n    status = task.status\n\n    return TaskStatusResponse.model_validate({\"status\": status})\n\n\n@router.get(\"/get_parsing\")\nasync def get_parsing(task_id: str) -&gt; ParsedDataResponse:\n    task = celery_app.AsyncResult(task_id)\n    result = task.result\n\n    data = result\n    print(data)\n\n    return ParsedDataResponse.model_validate({\"data\": data})\n</code></pre> <p>\u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 api/v1/celery/start_parsing \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e url \u0412 api/v1/celery/check_parsing \u043f\u043e task_id \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u043d\u043e\u0441\u0442\u044c \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0412 api/v1/celery/get_parsing \u043f\u043e task_id \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0442\u043e\u0433\u043e\u0432\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 (\u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0441 \u0434\u0430\u043c\u043f\u0430\u043c\u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 Hackaton \u0438 Task)</p> <p>\u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a \u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0435 get-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0441\u044c \u0432 \u0411\u0414</p> <p>\u0418\u0442\u043e\u0433\u043e\u0432\u044b\u0439 docker-compose.yml:</p> <pre><code>version: \"3.4\"\n\nservices:\n  db:\n    image: postgres:14.1\n    hostname: ${DB_HOST}\n    container_name: db\n    restart: always\n    volumes:\n      - ./db_data:/var/lib/postgresql/data\n    environment:\n      - POSTGRES_USER=${DB_USER}\n      - POSTGRES_PASSWORD=${DB_PASSWORD}\n      - POSTGRES_DB=${DB_NAME}\n    env_file:\n      - .env\n\n  rabbitmq:\n    image: rabbitmq:3.13.1\n    hostname: ${RABBITMQ__HOST}\n    container_name: rabbitmq\n    restart: always\n\n  redis:\n    image: redis:7.2.4\n    hostname: ${REDIS__HOST}\n    container_name: redis\n    restart: always\n\n  rest:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: rest\n    command: python -m uvicorn main:app --host 0.0.0.0 --port 8081\n    restart: always\n    volumes:\n      - ./src/:/app\n    ports:\n      - \"8081:8081\"\n    env_file:\n      - .env\n    depends_on:\n      - db\n\n  celery:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    container_name: celery\n    command: python -m celery -A celery_worker.app worker\n    restart: always\n    volumes:\n      - ./src/:/app\n    env_file:\n      - .env\n    depends_on:\n      - rest\n      - redis\n      - rabbitmq\n</code></pre>"},{"location":"submissions/","title":"Submissions API Documentation","text":""},{"location":"submissions/#introduction","title":"Introduction","text":"<p>This documentation provides details about the API endpoints for managing submissions.</p>"},{"location":"submissions/#models","title":"Models","text":""},{"location":"submissions/#submission","title":"Submission","text":"<ul> <li>id: <code>int</code></li> <li>submission_data: <code>str</code></li> <li>evaluation: <code>int | None</code></li> </ul>"},{"location":"submissions/#submissioncreatedata","title":"SubmissionCreateData","text":"<ul> <li>submission_data: <code>str</code></li> <li>evaluation: <code>int | None</code></li> <li>team_id: <code>int</code></li> <li>task_id: <code>int</code></li> </ul>"},{"location":"submissions/#submissionupdatedata","title":"SubmissionUpdateData","text":"<ul> <li>submission_data: <code>str | None</code></li> <li>evaluation: <code>int | None</code></li> <li>team_id: <code>int | None</code></li> <li>task_id: <code>int | None</code></li> </ul>"},{"location":"submissions/#endpoints","title":"Endpoints","text":""},{"location":"submissions/#get-all-submissions","title":"Get All Submissions","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/submissions/</code></li> <li>Response: <code>list[Submission]</code></li> </ul>"},{"location":"submissions/#get-submission-by-id","title":"Get Submission by ID","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/submissions/{submission_id}</code></li> <li>Parameter: <code>submission_id</code>: <code>int</code></li> <li>Response: <code>Submission</code></li> </ul>"},{"location":"submissions/#create-submission","title":"Create Submission","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/submissions/</code></li> <li>Request Body: <code>SubmissionCreateData</code></li> <li>Response: <code>Submission</code></li> </ul>"},{"location":"submissions/#update-submission","title":"Update Submission","text":"<ul> <li>Method: <code>PATCH</code></li> <li>URL: <code>/submissions/{submission_id}</code></li> <li>Parameter: <code>submission_id</code>: <code>int</code></li> <li>Request Body: <code>SubmissionUpdateData</code></li> <li>Response: <code>Submission</code></li> </ul>"},{"location":"submissions/#delete-submission","title":"Delete Submission","text":"<ul> <li>Method: <code>DELETE</code></li> <li>URL: <code>/submissions/{submission_id}</code></li> <li>Parameter: <code>submission_id</code>: <code>int</code></li> <li>Response: <code>str</code></li> </ul>"},{"location":"submissions/#usage","title":"Usage","text":"<ul> <li>Make requests to the provided endpoints using appropriate HTTP methods and request bodies as described.</li> </ul>"},{"location":"submissions/#note","title":"Note","text":"<ul> <li>Ensure to provide valid data formats and handle errors appropriately.</li> </ul>"},{"location":"task1/","title":"\u041f\u0435\u0440\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435","text":"approach mean time +- std (sec) naive 1.33 +- 0.02 threading 1.37 +- 0.03 multiprocessing 0.44 +- 0.01 asyncio 1.33 +- 0.01 <p>\u0422\u0443\u0442 \u0441 \u0437\u0430\u043c\u0435\u0442\u043d\u044b\u043c \u0443\u0441\u043f\u0435\u0445\u043e\u043c \u0432\u0441\u0435\u0445 \u043e\u0431\u044b\u0433\u0440\u044b\u0432\u0430\u0435\u0442 multiprocessing. Threading \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u0443\u0440\u043e\u0432\u043d\u0435 naive \u0438\u0437-\u0437\u0430 CPU/bound \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0438 \u0442\u0440\u0430\u0442\u0430\u043c\u0438 \u043d\u0430 context switching. \u041f\u0440\u0438\u0447\u0438\u043d\u044b \u043f\u0440\u043e\u0432\u0430\u043b\u0430 asyncio \u043c\u043d\u0435 \u043d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b.</p>"},{"location":"task1/#_2","title":"\u0421\u043d\u0438\u043f\u043f\u0435\u0442\u044b \u043a\u043e\u0434\u0430","text":"<ol> <li>\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f</li> </ol> <pre><code>def calculate_sum(start, end):\n    start_time = time.time()\n    result = sum(range(start, end))\n    print(f\"sum from {start} to {end}: {result}\")\n    print(f\"execution time: {round(time.time() - start_time, 5)} seconds\")\n</code></pre> <ol> <li>multithreading</li> </ol> <pre><code>def calculate_sum(start, end):\n    result = sum(range(start, end))\n    print(f\"sum from {start} to {end}: {result}\")\n\ndef main(num_of_tasks=5, step=1000000):\n    start_time = time.time()\n    threads = []\n    for i in range(num_of_tasks):\n        t = threading.Thread(target=calculate_sum, args=(i*step+1, (i+1)*step))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    print(f\"execution time: {round(time.time() - start_time, 5)} seconds\")\n</code></pre> <ol> <li>multiprocessing</li> </ol> <pre><code>def calculate_sum(start, end):\n    result = sum(range(start, end))\n    print(f\"sum from {start} to {end}: {result}\")\n\ndef main(num_of_tasks=5, step=1000000):\n    start_time = time.time()\n    processes = []\n    for i in range(num_of_tasks):\n        p = multiprocessing.Process(target=calculate_sum, args=(i*step+1, (i+1)*step))\n        processes.append(p)\n        p.start()\n\n    for p in processes:\n        p.join()\n\n    print(f\"execution time: {round(time.time() - start_time, 5)} seconds\")\n</code></pre> <ol> <li>asyncio</li> </ol> <pre><code>async def calculate_sum(start, end):\n    result = sum(range(start, end))\n    print(f\"sum from {start} to {end}: {result}\")\n\nasync def main(num_of_tasks=5, step=1000000):\n    start_time = time.time()\n    tasks = []\n    for i in range(num_of_tasks):\n        task = asyncio.create_task(calculate_sum(i*step+1, (i+1)*step))\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n    print(f\"execution time: {round(time.time() - start_time, 5)} seconds\")\n</code></pre>"},{"location":"task2/","title":"Task2","text":"approach mean time +- std (sec) naive 20.01 +- 1.25 threading 5.11 +- 0.95 multiprocessing 4.0 +- 0.62 asyncio 2.06 +- 1.64 <p>\u0417\u0434\u0435\u0441\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 threading \u0443\u0436\u0435 \u043e\u043f\u0440\u0430\u0432\u0434\u0430\u043d\u043e, \u043d\u043e multiprocessing \u0432\u0441\u0435 \u0440\u0430\u0432\u043d\u043e \u043a\u0440\u0443\u0447\u0435. \u0412\u044b\u0438\u0433\u0440\u0432\u044b\u0432\u0430\u0435\u0442 \u0436\u0435 asyncio, \u043e\u0434\u043d\u0430\u043a\u043e, \u043e\u043d \u0436\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0432\u043e\u043b\u0430\u0442\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c.</p>"},{"location":"task2/#_1","title":"\u0421\u043d\u0438\u043f\u043f\u0435\u0442\u044b \u043a\u043e\u0434\u0430","text":"<ol> <li>\u041d\u0430\u0438\u0432\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f</li> </ol> <pre><code>def add_hackathon(hack_info):\n    hack_name, hack_link = hack_info['name'], hack_info['link']\n    # \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e \u043a\u0435\u0439\u0441\n    inner_page = requests.get(hack_link)\n    soup_in = BeautifulSoup(inner_page.text, 'html.parser')\n    paragraphs = list(map(lambda x: x.text, soup_in.find_all('p')))\n    hack_case = '\\n'.join(paragraphs)\n    case_title = paragraphs[0]\n\n    with Session(engine) as session:\n        hackathon = Hackathon(\n            name=hack_name,\n            start_date=datetime.datetime.now(),\n            # \u043f\u0443\u0441\u0442\u044c \u0432\u0441\u0435 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b \u0434\u043b\u044f\u0442\u0441\u044f \u043d\u0435\u0434\u0435\u043b\u044e\n            end_date=datetime.datetime.now() + datetime.timedelta(days=7)\n        )\n\n        session.add(hackathon)\n        session.commit()\n        session.refresh(hackathon)\n\n        task = Task(\n            title=case_title,\n            description=hack_case,\n            requirements=\"Be cool\",\n            evaluation_criteria=\"Accuracy\",\n            hackathon_id=hackathon.id  # Assign the hackathon_id to establish the relationship\n        )\n        session.add(task)\n        session.commit()\n        session.refresh(task)\n</code></pre> <ol> <li>multithreading</li> </ol> <pre><code>def add_hackathon(hack_info):\n    hack_name, hack_link = hack_info['name'], hack_info['link']\n    # \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e \u043a\u0435\u0439\u0441\n    inner_page = requests.get(hack_link)\n    soup_in = BeautifulSoup(inner_page.text, 'html.parser')\n    paragraphs = list(map(lambda x: x.text, soup_in.find_all('p')))\n    hack_case = '\\n'.join(paragraphs)\n    case_title = paragraphs[0]\n\n    with Session(engine) as session:\n        hackathon = Hackathon(\n            name=hack_name,\n            start_date=datetime.datetime.now(),\n            # \u043f\u0443\u0441\u0442\u044c \u0432\u0441\u0435 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b \u0434\u043b\u044f\u0442\u0441\u044f \u043d\u0435\u0434\u0435\u043b\u044e\n            end_date=datetime.datetime.now() + datetime.timedelta(days=7)\n        )\n\n        session.add(hackathon)\n        session.commit()\n        session.refresh(hackathon)\n\n        task = Task(\n            title=case_title,\n            description=hack_case,\n            requirements=\"Be cool\",\n            evaluation_criteria=\"Accuracy\",\n            hackathon_id=hackathon.id  # Assign the hackathon_id to establish the relationship\n        )\n        session.add(task)\n        session.commit()\n        session.refresh(task)\n\n\ndef add_hackathon_list(hack_info_list):\n    for hack_info in hack_info_list:\n        add_hackathon(hack_info)\n\n\ndef main():\n    hack_data = json.load(open('hack_links.json'))\n\n    # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432\n    num_threads = 5\n    step = len(hack_data) // num_threads\n    threads = []\n\n    time_start = time.time()\n    for i in range(num_threads):\n        thread = threading.Thread(target=add_hackathon_list, args=(hack_data[i * step: (i + 1) * step], ))\n        thread.start()\n        threads.append(thread)\n\n    for t in threads:\n        t.join()\n\n    print(f'scraped info about {len(hack_data)} events')\n    print(f'done in {time.time() - time_start} seconds')\n</code></pre> <ol> <li>multiprocessing</li> </ol> <pre><code>def add_hackathon(hack_info):\n    hack_name, hack_link = hack_info['name'], hack_info['link']\n    # \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u043e \u043a\u0435\u0439\u0441\n    inner_page = requests.get(hack_link)\n    soup_in = BeautifulSoup(inner_page.text, 'html.parser')\n    paragraphs = list(map(lambda x: x.text, soup_in.find_all('p')))\n    hack_case = '\\n'.join(paragraphs)\n    case_title = paragraphs[0]\n\n    with Session(engine) as session:\n        hackathon = Hackathon(\n            name=hack_name,\n            start_date=datetime.datetime.now(),\n            # \u043f\u0443\u0441\u0442\u044c \u0432\u0441\u0435 \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u044b \u0434\u043b\u044f\u0442\u0441\u044f \u043d\u0435\u0434\u0435\u043b\u044e\n            end_date=datetime.datetime.now() + datetime.timedelta(days=7)\n        )\n\n        session.add(hackathon)\n        session.commit()\n        session.refresh(hackathon)\n\n        task = Task(\n            title=case_title,\n            description=hack_case,\n            requirements=\"Be cool\",\n            evaluation_criteria=\"Accuracy\",\n            hackathon_id=hackathon.id  # Assign the hackathon_id to establish the relationship\n        )\n        session.add(task)\n        session.commit()\n        session.refresh(task)\n\n\ndef add_hackathon_list(hack_info_list):\n    for hack_info in hack_info_list:\n        add_hackathon(hack_info)\n\n\ndef main():\n    hack_data = json.load(open('hack_links.json'))\n\n    # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0442\u043e\u043a\u043e\u0432\n    num_threads = 5\n    step = len(hack_data) // num_threads\n    processes = []\n\n    time_start = time.time()\n    for i in range(num_threads):\n        process = multiprocessing.Process(target=add_hackathon_list, args=(hack_data[i * step: (i + 1) * step], ))\n        process.start()\n        processes.append(process)\n\n    for p in processes:\n        p.join()\n\n    print(f'scraped info about {len(hack_data)} events')\n    print(f'done in {time.time() - time_start} seconds')\n</code></pre> <ol> <li>asyncio</li> </ol> <pre><code>async def add_hackathon(hack_info):\n    hack_name, hack_link = hack_info['name'], hack_info['link']\n    async with aiohttp.ClientSession() as session:\n        async with session.get(hack_link) as response:\n            inner_page = await response.text()\n            soup_in = BeautifulSoup(inner_page, 'html.parser')\n            paragraphs = [p.text for p in soup_in.find_all('p')]\n            hack_case = '\\n'.join(paragraphs)\n            case_title = paragraphs[0]\n\n    async with AsyncSession(async_engine) as session:\n        hackathon = Hackathon(\n            name=hack_name,\n            start_date=datetime.datetime.now(),\n            end_date=datetime.datetime.now() + datetime.timedelta(days=7)\n        )\n\n        session.add(hackathon)\n        await session.commit()\n        await session.refresh(hackathon)\n\n        task = Task(\n            title=case_title,\n            description=hack_case,\n            requirements=\"Be cool\",\n            evaluation_criteria=\"Accuracy\",\n            hackathon_id=hackathon.id\n        )\n        session.add(task)\n        await session.commit()\n        await session.refresh(task)\n\n\nasync def add_hackathon_list(hack_info_list):\n    tasks = [add_hackathon(hack_info) for hack_info in hack_info_list]\n    await asyncio.gather(*tasks)\n\n\nasync def main():\n    hack_data = json.load(open('hack_links.json'))\n\n    num_threads = 5\n    step = len(hack_data) // num_threads\n\n    time_start = time.time()\n    tasks = []\n    for i in range(num_threads):\n        task = add_hackathon_list(hack_data[i * step: (i + 1) * step])\n        tasks.append(task)\n\n    await asyncio.gather(*tasks)\n\n    print(f'scraped info about {len(hack_data)} events')\n    print(f'done in {time.time() - time_start} seconds')\n</code></pre>"},{"location":"tasks/","title":"Tasks API Documentation","text":""},{"location":"tasks/#introduction","title":"Introduction","text":"<p>This documentation provides details about the API endpoints for managing tasks.</p>"},{"location":"tasks/#models","title":"Models","text":""},{"location":"tasks/#taskcreatedata","title":"TaskCreateData","text":"<ul> <li>title: <code>str</code></li> <li>description: <code>str</code></li> <li>requirements: <code>str</code></li> <li>evaluation_criteria: <code>str</code></li> <li>hackathon_id: <code>int</code></li> </ul>"},{"location":"tasks/#taskupdatedata","title":"TaskUpdateData","text":"<ul> <li>title: <code>str | None</code></li> <li>description: <code>str | None</code></li> <li>requirements: <code>str | None</code></li> <li>evaluation_criteria: <code>str | None</code></li> <li>hackathon_id: <code>int | None</code></li> </ul>"},{"location":"tasks/#endpoints","title":"Endpoints","text":""},{"location":"tasks/#get-all-tasks","title":"Get All Tasks","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/tasks/</code></li> <li>Response: <code>list[Task]</code></li> </ul>"},{"location":"tasks/#get-task-by-id","title":"Get Task by ID","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/tasks/{task_id}</code></li> <li>Parameter: <code>task_id</code>: <code>int</code></li> <li>Response: <code>Task</code></li> </ul>"},{"location":"tasks/#create-task","title":"Create Task","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/tasks/</code></li> <li>Request Body: <code>TaskCreateData</code></li> <li>Response: <code>Task</code></li> </ul>"},{"location":"tasks/#update-task","title":"Update Task","text":"<ul> <li>Method: <code>PATCH</code></li> <li>URL: <code>/tasks/{task_id}</code></li> <li>Parameter: <code>task_id</code>: <code>int</code></li> <li>Request Body: <code>TaskUpdateData</code></li> <li>Response: <code>Task</code></li> </ul>"},{"location":"tasks/#delete-task","title":"Delete Task","text":"<ul> <li>Method: <code>DELETE</code></li> <li>URL: <code>/tasks/{task_id}</code></li> <li>Parameter: <code>task_id</code>: <code>int</code></li> <li>Response: <code>str</code></li> </ul>"},{"location":"tasks/#usage","title":"Usage","text":"<ul> <li>Make requests to the provided endpoints using appropriate HTTP methods and request bodies as described.</li> </ul>"},{"location":"tasks/#note","title":"Note","text":"<ul> <li>Ensure to provide valid data formats and handle errors appropriately.</li> </ul>"},{"location":"teams/","title":"Teams API Documentation","text":""},{"location":"teams/#introduction","title":"Introduction","text":"<p>This documentation provides details about the API endpoints for managing teams.</p>"},{"location":"teams/#models","title":"Models","text":""},{"location":"teams/#memberbase","title":"MemberBase","text":"<ul> <li>id: <code>int</code></li> <li>role: <code>str</code></li> </ul>"},{"location":"teams/#member","title":"Member","text":"<ul> <li>id: <code>int</code></li> <li>username: <code>str</code></li> <li>full_name: <code>str | None</code></li> <li>email: <code>str | None</code></li> <li>contact_number: <code>str | None</code></li> </ul>"},{"location":"teams/#hackathon","title":"Hackathon","text":"<ul> <li>id: <code>int</code></li> <li>name: <code>str</code></li> <li>start_date: <code>datetime.datetime</code></li> <li>end_date: <code>datetime.datetime</code></li> </ul>"},{"location":"teams/#team","title":"Team","text":"<ul> <li>id: <code>int</code></li> <li>name: <code>str</code></li> <li>hackathon: <code>Hackathon</code></li> <li>members: <code>list[Member] | None</code></li> </ul>"},{"location":"teams/#teamcreatedata","title":"TeamCreateData","text":"<ul> <li>name: <code>str</code></li> <li>hackathon_id: <code>int</code></li> <li>members: <code>list[MemberBase] | None</code></li> </ul>"},{"location":"teams/#teamupdatedata","title":"TeamUpdateData","text":"<ul> <li>name: <code>str | None</code></li> <li>hackathon_id: <code>int | None</code></li> </ul>"},{"location":"teams/#endpoints","title":"Endpoints","text":""},{"location":"teams/#get-all-teams","title":"Get All Teams","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/teams/</code></li> <li>Response: <code>list[Team]</code></li> </ul>"},{"location":"teams/#get-team-by-id","title":"Get Team by ID","text":"<ul> <li>Method: <code>GET</code></li> <li>URL: <code>/teams/{team_id}</code></li> <li>Parameter: <code>team_id</code>: <code>int</code></li> <li>Response: <code>Team</code></li> </ul>"},{"location":"teams/#create-team","title":"Create Team","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/teams/</code></li> <li>Request Body: <code>TeamCreateData</code></li> <li>Response: <code>Team</code></li> </ul>"},{"location":"teams/#add-member-to-team","title":"Add Member to Team","text":"<ul> <li>Method: <code>POST</code></li> <li>URL: <code>/teams/{team_id}/add_member</code></li> <li>Parameter: <code>team_id</code>: <code>int</code></li> <li>Request Body: <code>MemberBase</code></li> <li>Response: <code>Team</code></li> </ul>"},{"location":"teams/#update-team","title":"Update Team","text":"<ul> <li>Method: <code>PATCH</code></li> <li>URL: <code>/teams/{team_id}</code></li> <li>Parameter: <code>team_id</code>: <code>int</code></li> <li>Request Body: <code>TeamUpdateData</code></li> <li>Response: <code>Team</code></li> </ul>"},{"location":"teams/#delete-team","title":"Delete Team","text":"<ul> <li>Method: <code>DELETE</code></li> <li>URL: <code>/teams/{team_id}</code></li> <li>Parameter: <code>team_id</code>: <code>int</code></li> <li>Response: <code>str</code></li> </ul>"},{"location":"teams/#kick-member-from-team","title":"Kick Member from Team","text":"<ul> <li>Method: <code>DELETE</code></li> <li>URL: <code>/teams/{team_id}/kick_member/{member_id}</code></li> <li>Parameters: </li> <li><code>team_id</code>: <code>int</code></li> <li><code>member_id</code>: <code>int</code></li> <li>Response: <code>str</code></li> </ul>"},{"location":"teams/#usage","title":"Usage","text":"<ul> <li>Make requests to the provided endpoints using appropriate HTTP methods and request bodies as described.</li> </ul>"},{"location":"teams/#note","title":"Note","text":"<ul> <li>Ensure to provide valid data formats and handle errors appropriately.</li> </ul>"}]}